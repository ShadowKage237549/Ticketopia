<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE hibernate-mapping PUBLIC
"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping>
	<class name="com.ticketopia.beans.CustomerInfo" table="CustomerInformation">
		<meta attribute="class-description">
			A class containing customer information
		</meta>
		<!-- The next element will describe our primary key. 
		Next we describe the datatype to map it to, then we can
		detail the column name as it appears in sql.
		All attributes are optional. -->
		<id name="userEmail" type="String" column="customerEmail">
		<!-- name attaches to fieldName of the class -->
		<!-- type maps to a java datatype -->
		<!-- column is the sql name of the column. If you do not
			set it, it will default to the classname. -->
		</id>
		
		<property name="displayName" type="string" />
		<property name="userFName" type="string" />
		<property name="userLName" type="string" />
		<property name="accumulatedPoints" type="int" />
		<property name="role" type="int" />
		<property name="userAddress" type="string" />
		<property name="userCity" type="string" />
		<property name="userState" type="string" />
		<property name="userZip" type="int" />
		<property name="password" type="string" />
		<!-- type is optional, but do you REALLY want to trust
			a framework to figure it out? -->
	</class>
	<class name="com.ticketopia.beans.Comments" table="Comments">
		<meta attribute="class-description">
			A class containing comments on posts about topics
		</meta>
		<id name="commentId" type="int" column="commentId">
			<generator class="native">
				<param name="sequence">CustomerInformation_seq</param>
			</generator>
		</id>
		
		<property name="postId" type="int" />
		<property name="displayName" type="string" />
		<property name="message" type="string" />
		<property name="commentTimeStamp" type="string" />
	</class>
	<class name="com.ticketopia.beans.EventTypes" table="EventTypes">
		<meta attribute="class-description">
			A class containing types of events
		</meta>
		<id name="eventTypeId" type="int" column="eventTypeId">
			<generator class="native">
				<param name="sequence">EventTypes_seq</param>
			</generator>
		</id>
		
		<property name="eventType" type="string" />
	</class>
	<class name="com.ticketopia.beans.ForumPosts" table="Posts">
		<meta attribute="class-description">
			A class containing posts about topics
		</meta>
		<id name="postId" type="int" column="postId">
			<generator class="native">
				<param name="sequence">Forum_seq</param>
			</generator>
		</id>
		
		<property name="postTitle" type="string" />
		<property name="postContent" type="string" />
		<property name="topicId" type="int" />
		<property name="displayName" type="string" />
		<property name="postTimeStamp" type="string" />
	</class>
	<class name="com.ticketopia.beans.FreeTickets" table="FreeTickets">
		<meta attribute="class-description">
			A class containing a list of free tickets
		</meta>
		<id name="ticketId" type="int" column="ticketId"></id>
	</class>
	<class name="com.ticketopia.beans.Partners" table="Partners">
		<meta attribute="class-description">
			A class containing the partners
		</meta>
		<id name="partnerId" type="int" column="partnerId"></id>
		
		<property name="partnerName" type="string" />
	</class>
	<class name="com.ticketopia.beans.PaymentInfo" table="PaymentInfo">
		<meta attribute="class-description">
			A class containing valuable credit card information
		</meta>
		<id name="userEmail" type="string" column="customerEmail"></id>
		
		<property name="cardNumber" type="int" />
		<property name="securityCode" type="int" />
		<property name="expirationDate" type="string" />
		<property name="billingAddress" type="string" />
		<property name="billingCity" type="string" />
		<property name="billingState" type="string" />
		<property name="billingZip" type="int" />
	</class>
	<class name="com.ticketopia.beans.Tickets" table="Tickets">
		<meta attribute="class-description">
			A class containing ticket information
		</meta>
		<id name="ticketId" type="int" column="ticketId">
			<generator class="native">
				<param name="sequence">Tickets_seq</param>
			</generator>
		</id>
		
		<property name="ticketType" type="int" />
		<property name="topicId" type="int" />
		<property name="eventTypeId" type="int" />
		<property name="ticketPrice" type="double" />
		<property name="eventDescription" type="string" />
		<property name="eventAddress" type="string" />
		<property name="eventCity" type="string" />
		<property name="eventState" type="string" />
		<property name="eventZip" type="int" />
		<property name="seat" type="string" />
		<property name="partnerId" type="int" />
	</class>
	<class name="com.ticketopia.beans.Topics" table="Topics">
		<meta attribute="class-description">
			A class containing all of the topics
		</meta>
		<id name="topicId" type="int" column="topicId"></id>
		
		<property name="topicName" type="string" />
	</class>
	<class name="com.ticketopia.beans.UserRoles" table="UserType">
		<meta attribute="class-description">
			A class containing all of the types of users
		</meta>
		<id name="roleId" type="int" column="roleId"></id>
		
		<property name="role" type="string" />
	</class>
	
	
    <!-- Generator types:
            -assigned (Default if not assigned a type): id assigned manually
            -increment: generates an int/short/long starting with 1
            -sequence: will create a sequence to generate an id
                when using sequence. defaults to HIBERNATE_SEQUENCE.
                can use a custom name with <param name="sequence">SEQUENCE_NAME</param>
            -hilo: uses hilo algorithm to generate id
            -native: decides between identity, sequence, or hilo depending on vendor
            -identity:    for Sybase, MySQL, SQLServer,DB2 or HypersonicSQL
            -seqhilo: use hilo alogroithm with sequence object
            -uuid: uses uui algorithm
            -guid:
            -select: use a primary key returned by aa database trigger
            -foreign: use id of anotehr associated object, typically for one-to-one relationships
            -sequence-identity: special sequence generation strategy, for oracle10g only
            -->
	
</hibernate-mapping>